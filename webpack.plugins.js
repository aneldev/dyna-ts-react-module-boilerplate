const path = require('path');

const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin')

module.exports = {
  plugins: [
    // new webpack.IgnorePlugin(/\/something$/),            // Ignore something
    // new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/), // Ignore Moment's locale

    new ForkTsCheckerWebpackPlugin({
      async: false,
      typescript: {
        configFile: path.resolve(__dirname, 'tsconfig.json')
      }
    }),

    new CircularDependencyPlugin({
      // `onStart` is called before the cycle detection starts
      onStart({compilation}) {},
      // `onDetected` is called for each module that is cyclical
      onDetected({module: webpackModuleRecord, paths, compilation}) {
        // `paths` will be an Array of the relative module paths that make up the cycle
        // `module` will be the module record generated by webpack that caused the cycle
        if (paths[0].indexOf('node_modules/') > -1) return; // ignore node_modules
        compilation.errors.push(new Error(
          [
            'Circular Dependency detected:',
            `Module record: ${webpackModuleRecord}`,
            'Paths: ',
            ...paths.map(path=> `--> ${path}`),
          ].join('\n'),
        ))
      },
      // `onEnd` is called before the cycle detection ends
      onEnd({compilation}) {},
    }),
  ]
};
